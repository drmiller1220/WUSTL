points(y=debatewords$prop_negative_words_port[which(debatewords$Speaker=="OBAMA")],
x=debatewords$Statement.Number[which(debatewords$Speaker=="OBAMA")],
type="p", pch=3, col="dodgerblue")
points(y=debatewords$prop_positive_words_port[which(debatewords$Speaker=="LEHRER")],
x=debatewords$Statement.Number[which(debatewords$Speaker=="LEHRER")],
type="p", pch=19, col="forestgreen")
points(y=debatewords$prop_negative_words_port[which(debatewords$Speaker=="LEHRER")],
x=debatewords$Statement.Number[which(debatewords$Speaker=="LEHRER")],
type="p", pch=3, col="forestgreen")
points(y=debatewords$prop_positive_words_port[which(debatewords$Speaker=="ROMNEY")],
x=debatewords$Statement.Number[which(debatewords$Speaker=="ROMNEY")],
type="p", pch=19, col="firebrick1")
points(y=debatewords$prop_negative_words_port[which(debatewords$Speaker=="ROMNEY")],
x=debatewords$Statement.Number[which(debatewords$Speaker=="ROMNEY")],
type="p", pch=3, col="firebrick1")
plot(y=debatewords$prop_positive_words_snow[which(debatewords$Speaker=="OBAMA")],
x=debatewords$Statement.Number[which(debatewords$Speaker=="OBAMA")],
type="p", pch=19, col="dodgerblue", main = "Positive and Negative Word Proportions\n (Snowball Stemming)",
xlab="Statement Number", ylab="Proportion", ylim=c(0,1), xlim=c(0,167))
points(y=debatewords$prop_negative_words_snow[which(debatewords$Speaker=="OBAMA")],
x=debatewords$Statement.Number[which(debatewords$Speaker=="OBAMA")],
type="p", pch=3, col="dodgerblue")
points(y=debatewords$prop_positive_words_snow[which(debatewords$Speaker=="LEHRER")],
x=debatewords$Statement.Number[which(debatewords$Speaker=="LEHRER")],
type="p", pch=19, col="forestgreen")
points(y=debatewords$prop_negative_words_snow[which(debatewords$Speaker=="LEHRER")],
x=debatewords$Statement.Number[which(debatewords$Speaker=="LEHRER")],
type="p", pch=3, col="forestgreen")
points(y=debatewords$prop_positive_words_snow[which(debatewords$Speaker=="ROMNEY")],
x=debatewords$Statement.Number[which(debatewords$Speaker=="ROMNEY")],
type="p", pch=19, col="firebrick1")
points(y=debatewords$prop_negative_words_snow[which(debatewords$Speaker=="ROMNEY")],
x=debatewords$Statement.Number[which(debatewords$Speaker=="ROMNEY")],
type="p", pch=3, col="firebrick1")
par(mar=c(0,0,0,0))
plot(0,0, type="n", axes=FALSE, xlab="", ylab="")
legend(x="center", legend=c("Obama","Romney",
"Lehrer", "Positive", "Negative"), lty=c(1,1,1,0,0),
pch=c(0,0,0,19,3),
col = c("dodgerblue","firebrick1","forestgreen","black","black"))
dev.off()
layout(matrix(c(1,2,3,4,5,5), nrow=3, byrow=TRUE),
heights = c(0.35,0.35,0.3))
plot(y=debatewords$prop_positive_words[which(debatewords$Speaker=="OBAMA")],
x=debatewords$Statement.Number[which(debatewords$Speaker=="OBAMA")],
type="p", pch=19, col="dodgerblue", main = "Positive and Negative Word Proportions",
xlab="Statement Number", ylab="Proportion", ylim=c(0,1), xlim=c(0,167))
points(y=debatewords$prop_negative_words[which(debatewords$Speaker=="OBAMA")],
x=debatewords$Statement.Number[which(debatewords$Speaker=="OBAMA")],
type="p", pch=3, col="dodgerblue")
points(y=debatewords$prop_positive_words[which(debatewords$Speaker=="LEHRER")],
x=debatewords$Statement.Number[which(debatewords$Speaker=="LEHRER")],
type="p", pch=19, col="forestgreen")
points(y=debatewords$prop_negative_words[which(debatewords$Speaker=="LEHRER")],
x=debatewords$Statement.Number[which(debatewords$Speaker=="LEHRER")],
type="p", pch=3, col="forestgreen")
points(y=debatewords$prop_positive_words[which(debatewords$Speaker=="ROMNEY")],
x=debatewords$Statement.Number[which(debatewords$Speaker=="ROMNEY")],
type="p", pch=19, col="firebrick1")
points(y=debatewords$prop_negative_words[which(debatewords$Speaker=="ROMNEY")],
x=debatewords$Statement.Number[which(debatewords$Speaker=="ROMNEY")],
type="p", pch=3, col="firebrick1")
plot(y=debatewords$prop_positive_words_lan[which(debatewords$Speaker=="OBAMA")],
x=debatewords$Statement.Number[which(debatewords$Speaker=="OBAMA")],
type="p", pch=19, col="dodgerblue", main = "Positive and Negative Word Proportions\n (Lancaster Stemming)",
xlab="Statement Number", ylab="Proportion", ylim=c(0,1), xlim=c(0,167))
points(y=debatewords$prop_negative_words_lan[which(debatewords$Speaker=="OBAMA")],
x=debatewords$Statement.Number[which(debatewords$Speaker=="OBAMA")],
type="p", pch=3, col="dodgerblue")
points(y=debatewords$prop_positive_words_lan[which(debatewords$Speaker=="LEHRER")],
x=debatewords$Statement.Number[which(debatewords$Speaker=="LEHRER")],
type="p", pch=19, col="forestgreen")
points(y=debatewords$prop_negative_words_lan[which(debatewords$Speaker=="LEHRER")],
x=debatewords$Statement.Number[which(debatewords$Speaker=="LEHRER")],
type="p", pch=3, col="forestgreen")
points(y=debatewords$prop_positive_words_lan[which(debatewords$Speaker=="ROMNEY")],
x=debatewords$Statement.Number[which(debatewords$Speaker=="ROMNEY")],
type="p", pch=19, col="firebrick1")
points(y=debatewords$prop_negative_words_lan[which(debatewords$Speaker=="ROMNEY")],
x=debatewords$Statement.Number[which(debatewords$Speaker=="ROMNEY")],
type="p", pch=3, col="firebrick1")
plot(y=debatewords$prop_positive_words_port[which(debatewords$Speaker=="OBAMA")],
x=debatewords$Statement.Number[which(debatewords$Speaker=="OBAMA")],
type="p", pch=19, col="dodgerblue", main = "Positive and Negative Word Proportions\n (Porter Stemming)",
xlab="Statement Number", ylab="Proportion", ylim=c(0,1), xlim=c(0,167))
points(y=debatewords$prop_negative_words_port[which(debatewords$Speaker=="OBAMA")],
x=debatewords$Statement.Number[which(debatewords$Speaker=="OBAMA")],
type="p", pch=3, col="dodgerblue")
points(y=debatewords$prop_positive_words_port[which(debatewords$Speaker=="LEHRER")],
x=debatewords$Statement.Number[which(debatewords$Speaker=="LEHRER")],
type="p", pch=19, col="forestgreen")
points(y=debatewords$prop_negative_words_port[which(debatewords$Speaker=="LEHRER")],
x=debatewords$Statement.Number[which(debatewords$Speaker=="LEHRER")],
type="p", pch=3, col="forestgreen")
points(y=debatewords$prop_positive_words_port[which(debatewords$Speaker=="ROMNEY")],
x=debatewords$Statement.Number[which(debatewords$Speaker=="ROMNEY")],
type="p", pch=19, col="firebrick1")
points(y=debatewords$prop_negative_words_port[which(debatewords$Speaker=="ROMNEY")],
x=debatewords$Statement.Number[which(debatewords$Speaker=="ROMNEY")],
type="p", pch=3, col="firebrick1")
plot(y=debatewords$prop_positive_words_snow[which(debatewords$Speaker=="OBAMA")],
x=debatewords$Statement.Number[which(debatewords$Speaker=="OBAMA")],
type="p", pch=19, col="dodgerblue", main = "Positive and Negative Word Proportions\n (Snowball Stemming)",
xlab="Statement Number", ylab="Proportion", ylim=c(0,1), xlim=c(0,167))
points(y=debatewords$prop_negative_words_snow[which(debatewords$Speaker=="OBAMA")],
x=debatewords$Statement.Number[which(debatewords$Speaker=="OBAMA")],
type="p", pch=3, col="dodgerblue")
points(y=debatewords$prop_positive_words_snow[which(debatewords$Speaker=="LEHRER")],
x=debatewords$Statement.Number[which(debatewords$Speaker=="LEHRER")],
type="p", pch=19, col="forestgreen")
points(y=debatewords$prop_negative_words_snow[which(debatewords$Speaker=="LEHRER")],
x=debatewords$Statement.Number[which(debatewords$Speaker=="LEHRER")],
type="p", pch=3, col="forestgreen")
points(y=debatewords$prop_positive_words_snow[which(debatewords$Speaker=="ROMNEY")],
x=debatewords$Statement.Number[which(debatewords$Speaker=="ROMNEY")],
type="p", pch=19, col="firebrick1")
points(y=debatewords$prop_negative_words_snow[which(debatewords$Speaker=="ROMNEY")],
x=debatewords$Statement.Number[which(debatewords$Speaker=="ROMNEY")],
type="p", pch=3, col="firebrick1")
par(mar=c(0,0,0,0))
plot(0,0, type="n", axes=FALSE, xlab="", ylab="")
legend(x="center", legend=c("Obama","Romney",
"Lehrer", "Positive", "Negative"), lty=c(1,1,1,0,0),
pch=c(NA,NA,NA,19,3),
col = c("dodgerblue","firebrick1","forestgreen","black","black"))
setwd("C:\\Users\\drmiller1220\\Documents\\GitHub\\WUSTL\\HW3")
nyt_dtm <- read.csv("unigrams_dm.csv", header=TRUE)
nyt_dtm <- read.csv("unigram_dm.csv", header=TRUE)
nyt_dtm <- subset(nyt_dtm, drop = c("Title", "Desk"))
nyt_dtm <- subset(nyt_dtm, drop = c(Title, Desk))
nyt_dtm <- subset(nyt_dtm, drop = Title)
nyt_dtm <- subset(nyt_dtm, select = -c("Title", "Desk"))
nyt_dtm <- subset(nyt_dtm, select = -c(Title, Desk))
View(nyt_dtm)
nyt_dtm <- subset(nyt_dtm, select = -c(Story.Title, Story.Desk))
nyt_dtm <- read.csv("unigram_dm.csv", header=TRUE)
nyt_dtm_md <- subset(nyt_dtm, select = c(Story.Title, Story.Desk))
nyt_dtm <- subset(nyt_dtm, select = -c(Story.Title, Story.Desk))
kmeans(nyt_dtm, 2)
nyt_norm<- nyt_matrix
for(z in 1:nrow(nyt_norm)){
nyt_norm[z,]<- nyt_norm[z,]/sum(nyt_norm[z,])
}
kmeans(nyt_dtm, 2)
nyt_norm<- nyt_matrix
nyt_norm<- nyt_dtm_matrix
nyt_norm<- nyt_dtm_
nyt_norm<- nyt_dtm
for(z in 1:nrow(nyt_norm)){
nyt_norm[z,]<- nyt_norm[z,]/sum(nyt_norm[z,])
}
n.clust<- 3
set.seed(8675309) ##complicated objective function
k_cluster<- kmeans(nyt_norm, centers = n.clust)
table(k_cluster$cluster)
key_words<- matrix(NA, nrow=n.clust, ncol=10)
for(z in 1:n.clust){
key_words[z,]<- colnames(nyt_dtm)[order(k_cluster$center[z,], decreasing=T)[1:10]]
}
key_words
colnames(nyt_dtm)[1:10]
colnames(nyt_dtm)[1:100]
colnames(nyt_dtm)[101:200]
colnames(nyt_dtm)[201:300]
colnames(nyt_dtm)[301:400]
colnames(nyt_dtm)[401:500]
colnames(nyt_dtm)[501:600]
colnames(nyt_dtm)[601:700]
colnames(nyt_dtm)[701:800]
colnames(nyt_dtm)[801:900]
colnames(nyt_dtm)[901:1000]
key_words
nyt_dtm$.
setwd("C:\\Users\\drmiller1220\\Documents\\GitHub\\WUSTL\\HW3")
nyt_dtm <- read.csv("unigram_dm.csv", header=TRUE)
nyt_dtm_md <- subset(nyt_dtm, select = c(Story.Title, Story.Desk))
nyt_dtm <- subset(nyt_dtm, select = -c(Story.Title, Story.Desk))
nyt_norm<- nyt_dtm
for(z in 1:nrow(nyt_norm)){
nyt_norm[z,]<- nyt_norm[z,]/sum(nyt_norm[z,])
}
n.clust<- 3
set.seed(8675309) ##complicated objective function
k_cluster<- kmeans(nyt_norm, centers = n.clust)
table(k_cluster$cluster)
key_words<- matrix(NA, nrow=n.clust, ncol=10)
for(z in 1:n.clust){
key_words[z,]<- colnames(nyt_dtm)[order(k_cluster$center[z,], decreasing=T)[1:10]]
}
key_words
k_cluster
n.clust<- 6
set.seed(8675309) ##complicated objective function
k_cluster<- kmeans(nyt_norm, centers = n.clust)
table(k_cluster$cluster)
key_words<- matrix(NA, nrow=n.clust, ncol=10)
for(z in 1:n.clust){
key_words[z,]<- colnames(nyt_dtm)[order(k_cluster$center[z,], decreasing=T)[1:10]]
}
key_words
k_cluster
k_cluster$centers
k_cluster$cluster
k_cluster$centers
length(k_cluster$centers)
k_cluster$centers[1:1000]
k_cluster$centers
k_cluster$centers[1,]
k_cluster$centers[2,]
k_cluster$centers[3,]
k_cluster$cluster
k_cluster$size
length(k_cluster$size)
k_cluster$cluster[3]
k_cluster$centers[1]
k_cluster$centers[1,]
obj_func <- function(dtm, kcluster_obj){
obj_func_value <- NULL
for(i in 1:length(kcluster_obj$size)){
for(j in 1:length(kcluster_obj$cluster)){
if(kcluster_obj$cluster[j]==i){
value <- sum((dtm[j]-kcluster_obj[i,])^2)
obj_func_value <- append(obj_func_value, value)
}
}
}
total_value <- sum(obj_func_value)
return(total_value)
}
obj_func(nut_dtm, k_cluster)
obj_func(nyt_dtm, k_cluster)
obj_func <- function(dtm, kcluster_obj){
obj_func_value <- NULL
for(i in 1:length(kcluster_obj$size)){
for(j in 1:length(kcluster_obj$cluster)){
if(kcluster_obj$cluster[j]==i){
value <- sum((dtm[j]-kcluster_obj$centers[i,])^2)
obj_func_value <- append(obj_func_value, value)
}
}
}
total_value <- sum(obj_func_value)
return(total_value)
}
obj_func(nyt_dtm, k_cluster)
n.clust<- 10
set.seed(8675309) ##complicated objective function
k_cluster<- kmeans(nyt_norm, centers = n.clust)
table(k_cluster$cluster)
obj_func <- function(dtm, kcluster_obj){
obj_func_value <- NULL
for(i in 1:length(kcluster_obj$size)){
for(j in 1:length(kcluster_obj$cluster)){
if(kcluster_obj$cluster[j]==i){
value <- sum((dtm[j]-kcluster_obj$centers[i,])^2)
obj_func_value <- append(obj_func_value, value)
}
}
}
total_value <- sum(obj_func_value)
return(total_value)
}
obj_func(nyt_dtm, k_cluster)
obj_func_values <- NULL
for(i in 1:(dim(nyt_dtm)[1]-1)){
k_cluster<- kmeans(nyt_norm, centers = i)
obj_func_value <- obj_func(nyt_norm, k_cluster)
}
obj_func_values
obj_func_values <- NULL
for(i in 1:(dim(nyt_dtm)[1]-1)){
k_cluster<- kmeans(nyt_norm, centers = i)
obj_func_value <- obj_func(nyt_norm, k_cluster)
obj_func_values <- append(obj_func_values, obj_func_value)
}
obj_func_values
i = 288
obj_func_values <- NULL
k_cluster<- kmeans(nyt_norm, centers = i)
obj_func_value <- obj_func(nyt_norm, k_cluster)
obj_func_values <- append(obj_func_values, obj_func_value)
k_cluster<- kmeans(nyt_norm, centers = n.clust)
obj_func(nyt_norm, k_cluster)
k_cluster$cluster[2]
k_cluster$cluster[5]
dtm = nyt_norm
kcluster_obj = k_cluster
i=1
obj_func_value <- NULL
for(j in 1:length(kcluster_obj$cluster)){
if(kcluster_obj$cluster[j]==i){
value <- sum((dtm[j]-kcluster_obj$centers[i,])^2)
obj_func_value <- append(obj_func_value, value)
for(j in 1:length(kcluster_obj$cluster)){
if(kcluster_obj$cluster[j]==i){
value <- sum((dtm[j]-kcluster_obj$centers[i,])^2)
if(kcluster_obj$cluster[j]==i){
value <- sum((dtm[j]-kcluster_obj$centers[i,])^2)
obj_func_value <- append(obj_func_value, value)
}
}
}
}
}
for(j in 1:length(kcluster_obj$cluster)){
if(kcluster_obj$cluster[j]==i){
value <- sum((dtm[j]-kcluster_obj$centers[i,])^2)
obj_func_value <- append(obj_func_value, value)
}
}
obj_func_value <- NULL
for(j in 1:length(kcluster_obj$cluster)){
if(kcluster_obj$cluster[j]==i){
value <- sum((dtm[j]-kcluster_obj$centers[i,])^2)
obj_func_value <- append(obj_func_value, value)
}
}
k_cluster$size
n.clust<- 2
set.seed(8675309) ##complicated objective function
k_cluster<- kmeans(nyt_norm, centers = n.clust)
obj_func <- function(dtm, kcluster_obj){
obj_func_value <- NULL
for(i in 1:length(kcluster_obj$size)){
for(j in 1:length(kcluster_obj$cluster)){
if(kcluster_obj$cluster[j]==i){
value <- sum((dtm[j]-kcluster_obj$centers[i,])^2)
obj_func_value <- append(obj_func_value, value)
}
}
}
total_value <- sum(obj_func_value)
return(total_value)
}
obj_func(nyt_norm, kcluster_obj)
obj_func(nyt_norm, kcluster)
obj_func(nyt_norm, k_cluster)
n.clust<- 5
k_cluster<- kmeans(nyt_norm, centers = n.clust)
set.seed(8675309) ##complicated objective function
obj_func(nyt_norm, k_cluster)
n.clust<- 287
set.seed(8675309) ##complicated objective function
k_cluster<- kmeans(nyt_norm, centers = n.clust)
obj_func(nyt_norm, k_cluster)
kcluster_bj <- k_cluster
kcluster_obj <- k_cluster
dtm <- nyt_norm
k_cluster$cluster[5]
n.clust<- 5
set.seed(8675309) ##complicated objective function
k_cluster<- kmeans(nyt_norm, centers = n.clust)
k_cluster$cluster[5]
j=5
i=4
obj_func_value <- NULL
value <- sum((dtm[j,]-kcluster_obj$centers[i,])^2)
obj_func_value <- append(obj_func_value, value)
dtm[j,]-kcluster_obj$centers[i,])^2
(dtm[j,]-kcluster_obj$centers[i,])^2
length((dtm[j,]-kcluster_obj$centers[i,])^2)
obj_func <- function(dtm, kcluster_obj){
obj_func_value <- NULL
for(i in 1:length(kcluster_obj$size)){
for(j in 1:length(kcluster_obj$cluster)){
if(kcluster_obj$cluster[j]==i){
value <- sum((dtm[j,]-kcluster_obj$centers[i,])^2)
obj_func_value <- append(obj_func_value, value)
}
}
}
total_value <- sum(obj_func_value)
return(total_value)
}
obj_func_values <- NULL
for(i in 1:(dim(nyt_dtm)[1]-1)){
k_cluster<- kmeans(nyt_norm, centers = i)
obj_func_value <- obj_func(nyt_norm, k_cluster)
obj_func_values <- append(obj_func_values, obj_func_value)
}
obj_func_values
plot(obj_func_values, 1:287, ylab="Objective Function Value", xlab="Number of Clusters",
main="Objective Function Value for Varying Numbers of Clusters")
plot(obj_func_values, 1:length(obj_func_values), ylab="Objective Function Value", xlab="Number of Clusters",
main="Objective Function Value for Varying Numbers of Clusters")
plot(y=obj_func_values, x=1:length(obj_func_values), ylab="Objective Function Value", xlab="Number of Clusters",
main="Objective Function Value for Varying Numbers of Clusters")
set.seed(89)
k_cluster<- kmeans(nyt_norm, centers = 6)
table(k_cluster$cluster)
diff_scores <- NULL
for(i in 1:length(k_cluster$size)){
cluster_selected <- k_cluster$centers[i,]
clusters_not <- k_cluster$centers[-i,]
mean_clusters_not <- apply(k_cluster$centers[-i,], 2, FUN=function(x) mean(x, na.rm = TRUE))
cluster_diff <- cluster_selected - mean_clusters_not
rbind(diff_scores, cluster_diff)
}
diff_scores <- NULL
for(i in 1:length(k_cluster$size)){
cluster_selected <- k_cluster$centers[i,]
clusters_not <- k_cluster$centers[-i,]
mean_clusters_not <- apply(k_cluster$centers[-i,], 2, FUN=function(x) mean(x, na.rm = TRUE))
cluster_diff <- cluster_selected - mean_clusters_not
diff_scores <- rbind(diff_scores, cluster_diff)
}
View(diff_scores)
order(diff_scores[1,])[1:10]
diff_scores[1,]
sort(diff_scores[1,])[1:10]
rev(sort(diff_scores[1,])[1:10])
rev(sort(diff_scores[2,])[1:10])
rev(sort(diff_scores[2,]))
rev(sort(diff_scores[2,]))[1:10]
rev(sort(diff_scores[1,]))[1:10]
rev(sort(diff_scores[2,]))[1:10]
rev(sort(diff_scores[3,]))[1:10]
rev(sort(diff_scores[4,]))[1:10]
rev(sort(diff_scores[5,]))[1:10]
rev(sort(diff_scores[6,]))[1:10]
rev(sort(diff_scores[1,]))[1:10]
rev(sort(diff_scores[1,]))[1:20]
rev(sort(diff_scores[1,]))[1:10]
rev(sort(diff_scores[2,]))[1:10]
rev(sort(diff_scores[3,]))[1:10]
rev(sort(diff_scores[4,]))[1:10]
rev(sort(diff_scores[5,]))[1:10]
rev(sort(diff_scores[6,]))[1:10]
i=1
stories <- k_cluster$cluster[which(k_cluster$cluster==i)]
stories
names(stories)
as.numeric(names(stories))
sampled_stories <- sample(as.numeric(names(stories)))
sampled_stories <- sample(as.numeric(names(stories)), 5, replace=FALSE)
stories_to_read <- NULL
for(i in 1:length(k_cluster$size)){
stories <- k_cluster$cluster[which(k_cluster$cluster==i)]
sampled_stories <- sample(as.numeric(names(stories)), 5, replace=FALSE)
stories_to_read <- rbind(stories_to_read, sampled_stories)
}
View(stories_to_read)
k_cluster$size
stories_to_read <- NULL
for(i in c(1, 5, 6))){
stories <- k_cluster$cluster[which(k_cluster$cluster==i)]
sampled_stories <- sample(as.numeric(names(stories)), 5, replace=FALSE)
stories_to_read <- rbind(stories_to_read, sampled_stories)
}
stories_to_read <- NULL
for(i in c(1, 5, 6)){
stories <- k_cluster$cluster[which(k_cluster$cluster==i)]
sampled_stories <- sample(as.numeric(names(stories)), 5, replace=FALSE)
stories_to_read <- rbind(stories_to_read, sampled_stories)
}
View(stories_to_read)
i=2
stories <- k_cluster$cluster[which(k_cluster$cluster==i)]
stories
i=3
stories <- k_cluster$cluster[which(k_cluster$cluster==i)]
stories
i=4
stories <- k_cluster$cluster[which(k_cluster$cluster==i)]
stories
nyt_dtm <- read.csv("nyt_emo.csv", header=TRUE)
nyt_emo <- read.csv("nyt_emo.csv", header=TRUE)
View(nyt_emo)
nyt_dtm <- read.csv("unigram_dm.csv", header=TRUE)
nyt_emo <- read.csv("nyt_emo.csv", header=TRUE)
t.test(nyt_emo$Positivity[which(nyt_emo$After.Election==0)],
nyt_emo$Positivity[which(nyt_emo$After.Election==0)])
t.test(nyt_emo$Positivity[which(nyt_emo$After.Election==0)],
nyt_emo$Positivity[which(nyt_emo$After.Election==1)])
nyt_emo$Positivity[which(nyt_emo$After.Election==0)]
nyt_emo <- read.csv("nyt_emo.csv", header=TRUE, stringsAsFactors = FALSE)
t.test(nyt_emo$Positivity[which(nyt_emo$After.Election==0)],
nyt_emo$Positivity[which(nyt_emo$After.Election==1)])
nyt_emo$Positivity[which(nyt_emo$After.Election==0)]
t.test(as.numeric(nyt_emo$Positivity[which(nyt_emo$After.Election==0)]),
as.numeric(nyt_emo$Positivity[which(nyt_emo$After.Election==1)]))
unique(nyt_emo$Desk)
mean(as.numeric(nyt_emo$Positivity[which(nyt_emo$Desk=="Business/Financial Desk")]))
mean(as.numeric(nyt_emo$Positivity[which(nyt_emo$Desk=="Desk")]))
nyt_emo[which(nyt_emo$Desk="Desk"),]
nyt_emo[which(nyt_emo$Desk=="Desk"),]
nyt_emo <- read.csv("nyt_emo.csv", header=TRUE, stringsAsFactors = FALSE)
View(nyt_emo)
unique(nyt_emo$Desk)
nyt_emo <- read.csv("nyt_emo.csv", header=TRUE, stringsAsFactors = FALSE)
t.test(as.numeric(nyt_emo$Positivity[which(nyt_emo$After.Election==0)]),
as.numeric(nyt_emo$Positivity[which(nyt_emo$After.Election==1)]))
View(nyt_emo)
nyt_emo <- read.csv("nyt_emo.csv", header=TRUE, stringsAsFactors = FALSE)
t.test(as.numeric(nyt_emo$Positivity[which(nyt_emo$After.Election==0)]),
as.numeric(nyt_emo$Positivity[which(nyt_emo$After.Election==1)]))
mean(as.numeric(nyt_emo$Positivity[which(nyt_emo$Desk=="Business/Financial Desk")]))
mean(as.numeric(nyt_emo$Positivity[which(nyt_emo$Desk=="Desk")]))
mean(as.numeric(nyt_emo$Positivity[which(nyt_emo$Desk=="The Arts/Cultural Desk")]))
nyt_emo[which(nyt_emo$Desk=="Desk")]
mean(as.numeric(nyt_emo$Positivity[which(nyt_emo$Desk=="Business/Financial Desk")]))
mean(as.numeric(nyt_emo$Positivity[which(nyt_emo$Desk=="The Arts/Cultural Desk")]))
mean(as.numeric(nyt_emo$Positivity[which(nyt_emo$Desk=="National Desk")]))
mean(as.numeric(nyt_emo$Positivity[which(nyt_emo$Desk=="Foreign Desk")]))
mean(as.numeric(nyt_emo$Positivity[which(nyt_emo$Desk=="Sports Desk")]))
mean(as.numeric(nyt_emo$Positivity[which(nyt_emo$Desk=="Editorial Desk")]))
mean(as.numeric(nyt_emo$Positivity[which(nyt_emo$Desk=="Health & Fitness Desk")]))
unique(nyt_emo$Desk)
mean(as.numeric(nyt_emo$Positivity[which(nyt_emo$Desk=="Health & Fitness")]))
mean(as.numeric(nyt_emo$Positivity[which(nyt_emo$Desk=="Science Desk")]))
mean(as.numeric(nyt_emo$Positivity[which(nyt_emo$Desk=="Metropolitan Desk")]))
pairwise.t.test(nyt_emo$Positivity, nyt_emo$Desk)
